/*
 * Yagna Market API
 *
 *  ## Yagna Market The Yagna Market is a core component of the Yagna Network, which enables computational Offers and Demands circulation. The Market is open for all entities willing to buy computations (Demands) or monetize computational resources (Offers). ## Yagna Market API The Yagna Market API is the entry to the Yagna Market through which Requestors and Providers can publish their Demands and Offers respectively, find matching counterparty, conduct negotiations and make an agreement.  This version of Market API conforms with capability level 1 of the <a href=\"https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg\"> Market API specification</a>.  Market API contains two roles: Requestors and Providers which are symmetrical most of the time (excluding agreement phase).
 *
 * The version of the OpenAPI document: 1.4.2
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use std::collections::HashSet;

use crate::market::{Demand, Offer};
use crate::ErrorMessage;

const PAYMENT_PLATFORM_PREFIX: &str = "payment.platform.";
const CHOSEN_PAYMENT_PLATFORM: &str = "payment.chosen-platform";

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Proposal {
    #[serde(rename = "properties")]
    pub properties: serde_json::Value,
    #[serde(rename = "constraints")]
    pub constraints: String,
    #[serde(rename = "proposalId", skip_serializing_if = "Option::is_none")]
    pub proposal_id: Option<String>,
    #[serde(rename = "issuerId", skip_serializing_if = "Option::is_none")]
    pub issuer_id: Option<String>, // TODO: use NodeId
    /// * `Initial` - proposal arrived from the market as response to subscription
    /// * `Draft` - bespoke counter-proposal issued by one party directly to other party (negotiation phase)
    /// * `Rejected` by other party
    /// * `Accepted` - promoted into the Agreement draft
    /// * `Expired` - not accepted nor rejected before validity period
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// id of the proposal from other side which this proposal responds to
    #[serde(rename = "prevProposalId", skip_serializing_if = "Option::is_none")]
    pub prev_proposal_id: Option<String>,
}

fn choose_payment_platform(
    demand_platforms: Vec<String>,
    offer_platforms: Vec<String>,
) -> Result<String, ErrorMessage> {
    let mut platforms = HashSet::new();
    for platform in demand_platforms {
        platforms.insert(platform);
    }

    // Choose first matching
    for platform in offer_platforms {
        if platforms.contains(&platform) {
            return Ok(platform);
        }
    }

    Err(ErrorMessage::new("No common payment platforms".into()))
}

fn parse_payment_platforms(properties: &serde_json::value::Value) -> Vec<String> {
    let mut platforms: Vec<String> = vec![];
    for prop in properties.as_object().unwrap().keys() {
        match extract_payment_platform(prop) {
            Some(payment_platform) => platforms.push(payment_platform),
            None => {}
        }
    }
    platforms
}

fn extract_payment_platform(property: &str) -> Option<String> {
    match property.rfind(PAYMENT_PLATFORM_PREFIX) {
        Some(prefix_start) => {
            let start_position = prefix_start + PAYMENT_PLATFORM_PREFIX.len();
            let prop = &property[start_position..property.len()];
            match prop.find(".") {
                Some(suffix_start) => Some((&prop[..suffix_start]).into()),
                None => Some(prop.into()),
            }
        }
        None => None,
    }
}

impl Proposal {
    pub fn new(properties: serde_json::Value, constraints: String) -> Proposal {
        Proposal {
            properties,
            constraints,
            proposal_id: None,
            issuer_id: None,
            state: None,
            prev_proposal_id: None,
        }
    }

    pub fn counter_demand(&self, demand: Demand) -> Result<Proposal, ErrorMessage> {
        let mut properties = demand.properties.clone();
        let demand_platforms = parse_payment_platforms(
            &properties
                .get("golem")
                .unwrap_or(&serde_json::json!({}))
                .get("com")
                .unwrap_or(&serde_json::json!({})),
        );
        let offer_platforms = parse_payment_platforms(&self.properties);

        match choose_payment_platform(demand_platforms, offer_platforms) {
            Ok(chosen_payment_platform) => {
                properties["golem"]["com"].as_object_mut().unwrap().insert(
                    CHOSEN_PAYMENT_PLATFORM.to_string(),
                    serde_json::Value::String(chosen_payment_platform),
                );

                Ok(Proposal {
                    properties: properties,
                    constraints: demand.constraints,
                    proposal_id: None,
                    issuer_id: None,
                    state: None,
                    prev_proposal_id: Some(self.proposal_id()?.clone()),
                })
            }
            Err(err) => Err(err),
        }
    }

    pub fn counter_offer(&self, offer: Offer) -> Result<Proposal, ErrorMessage> {
        let mut properties = offer.properties.clone();
        let chosen_payment_platform = self.chosen_payment_platform()?;
        properties.as_object_mut().unwrap().insert(
            format!("golem.com.{}", CHOSEN_PAYMENT_PLATFORM).to_string(),
            serde_json::Value::String(chosen_payment_platform),
        );
        Ok(Proposal {
            properties: properties,
            constraints: offer.constraints,
            proposal_id: None,
            issuer_id: None,
            state: None,
            prev_proposal_id: Some(self.proposal_id()?.clone()),
        })
    }

    pub fn proposal_id(&self) -> Result<&String, ErrorMessage> {
        self.proposal_id.as_ref().ok_or("no proposal id".into())
    }

    pub fn issuer_id(&self) -> Result<&String, ErrorMessage> {
        self.issuer_id.as_ref().ok_or("no issuer id".into())
    }

    pub fn state(&self) -> Result<&State, ErrorMessage> {
        self.state.as_ref().ok_or("no state id".into())
    }

    pub fn prev_proposal_id(&self) -> Result<&String, ErrorMessage> {
        self.prev_proposal_id
            .as_ref()
            .ok_or("no previous proposal id".into())
    }

    pub fn chosen_payment_platform(&self) -> Result<String, ErrorMessage> {
        match self
            .properties
            .get(format!("golem.com.{}", CHOSEN_PAYMENT_PLATFORM))
        {
            Some(chosen_payment_platform) => Ok(chosen_payment_platform.as_str().unwrap().into()),
            None => {
                match self
                    .properties
                    .get("golem")
                    .unwrap_or(&serde_json::json!({}))
                    .get("com")
                    .unwrap_or(&serde_json::json!({}))
                    .get(CHOSEN_PAYMENT_PLATFORM)
                {
                    Some(chosen_platform) => Ok(chosen_platform.as_str().unwrap().into()),
                    None => Err(ErrorMessage::new("Payment platform not chosen".into())),
                }
            }
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "Initial")]
    /// Proposal arrived from the market as response to subscription
    Initial,
    #[serde(rename = "Draft")]
    /// Bespoke counter-proposal issued by one party directly to other party (negotiation phase)
    Draft,
    #[serde(rename = "Rejected")]
    /// Rejected by other party
    Rejected,
    #[serde(rename = "Accepted")]
    /// Promoted to the Agreement draft
    Accepted,
    #[serde(rename = "Expired")]
    /// Not accepted nor rejected before validity period
    Expired,
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_extract_payment_platform_when_no_platform() {
        assert_eq!(extract_payment_platform("test"), None);
    }

    #[test]
    fn test_extract_payment_platform() {
        assert_eq!(
            extract_payment_platform("payment.platform.ngnt"),
            Some("ngnt".into())
        );
    }

    #[test]
    fn test_extract_payment_platform_with_prefix() {
        assert_eq!(
            extract_payment_platform("golem.com.payment.platform.zk-ngnt"),
            Some("zk-ngnt".into())
        );
    }

    #[test]
    fn test_extract_payment_platform_with_suffix() {
        assert_eq!(
            extract_payment_platform("payment.platform.zk-ngnt.address"),
            Some("zk-ngnt".into())
        );
    }

    #[test]
    fn test_extract_payment_platform_with_prefix_and_suffix() {
        assert_eq!(
            extract_payment_platform("golem.com.payment.platform.zk-ngnt.address"),
            Some("zk-ngnt".into())
        );
    }
}
