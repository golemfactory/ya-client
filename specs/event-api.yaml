openapi: 3.0.2
info:
  version: 0.1.0
  title: Yagna Event API
  description: '
    Event API is a technical interface which facilitates the flow of event notifications 
    related to all Functional APIs. It specifies a uniform pattern of collecting event objects 
    from a Daemon instance.
    The Event API is symmetric, ie. identical on both Requestor and Provider sides. Note that 
    the Event Type sets received via Event API differ - the difference is indicated in the 
    [Event API specification]
    (https://docs.google.com/document/d/1LWw_4ugMPzRos4FH5LlQmnjHpeLuTvtBiH80ZRLMNDA).
'

servers:
  - url: /event-api/v1

security:
  - ApiKeyAuth: []


paths:

  /events/{subscriptionId}:
    parameters:
      - $ref: '#/components/parameters/subscriptionId'
      - $ref: '#/components/parameters/timeout'
      - $ref: '#/components/parameters/afterTimestamp'
      - $ref: '#/components/parameters/maxEvents'
    get:
      summary: Reads Market responses to published Offer.
      description: '
        This is a blocking operation. It will not return until there is at least one new event.

        **Note**: The `collectSubscriptionEvents` call is still possible after the subscription has been destroyed 
        (ie. even for a removed subscription, the related events may still arrive from the network).

        '
      operationId: collectSubscriptionEvents
      responses:
        '200':
          description: Event list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'

        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'

components:
  securitySchemes:
    ApiKeyAuth:
        type: apiKey
        in: header
        name: X-API-KEY
        
  parameters:
    subscriptionId:
      name: subscriptionId
      in: path
      required: true
      schema:
        type: string

    maxEvents:
      name: maxEvents
      description: >
          Maximum number of events that server should return at once
          (empty value means no limit).
      required: false
      in: query
      schema:
        type: integer
        format: int32
        minimum: 0

    timeout:
      name: timeout
      description: >
          How many seconds server should wait for new events (0.0 means it should
          return immediately if there are no events)
      required: false
      in: query
      schema:
        type: number
        format: float
        minimum: 0.0

    afterTimestamp:
      name: afterTimestamp
      description: Show only events later than specified timestamp
      in: query
      required: false
      schema:
        type: string
        format: date-time


  responses: 
    Unauthorized:
        description: Authorization information is missing or invalid.
        content:
          application/json:
            schema:
              $ref: 'common.yaml#/schemas/ErrorMessage'
  
    NotFound:
        description: The specified resource was not found.
        content:
          application/json:
            schema:
              $ref: 'common.yaml#/schemas/ErrorMessage'
  
    UnexpectedError:
        description: Unexpected error.
        content:
          application/json:
            schema:
              $ref: 'common.yaml#/schemas/ErrorMessage'
  

  schemas:
    # refactor the following to Event API
    Event:
        type: object
        required:
          - eventType
          - eventDate
        discriminator:
          propertyName: eventType
        properties:
          eventType:
            type: string
          eventDate:
            type: string
            format: date-time
  
    DemandProposalEvent:
        allOf:
          - $ref: '#/components/schemas/Event'
          - type: object
        properties:
          proposal:
            $ref: 'market-api.yaml#/components/schemas/Proposal'

    OfferProposalEvent:
        allOf:
          - $ref: '#/components/schemas/Event'
          - type: object
        properties:
          proposal:
            $ref: 'market-api.yaml#/components/schemas/Proposal'

    PropertyQueryEvent:
        allOf:
          - $ref: '#/components/schemas/Event'
          - type: object
        properties:
          propertyQuery:
            $ref: 'market-api.yaml#/components/schemas/PropertyQuery'

    AgreementProposalEvent: 
        allOf:
          - $ref: '#/components/schemas/Event'
          - type: object
        properties:
          agreement:
            $ref: 'market-api.yaml#/components/schemas/Agreement'
      
    AgreementEvent: 
        allOf:
          - $ref: '#/components/schemas/Event'
          - type: object
        properties:
          agreementId:
            type: string

    AgreementAcceptedEvent: 
        allOf:
          - $ref: '#/components/schemas/AgreementEvent'
          - type: object
                              
    AgreementRejectedEvent: 
        allOf:
          - $ref: '#/components/schemas/AgreementEvent'
          - type: object

    AgreementCancelledEvent: 
        allOf:
          - $ref: '#/components/schemas/AgreementEvent'
          - type: object

    AgreementTimeoutEvent: 
        allOf:
          - $ref: '#/components/schemas/AgreementEvent'
          - type: object

    AgreementTerminatedEvent: 
        allOf:
          - $ref: '#/components/schemas/AgreementEvent'
          - type: object
  
