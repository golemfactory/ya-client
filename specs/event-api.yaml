openapi: 3.0.2
info:
  version: 0.1.1
  title: Yagna Event API
  description: '
    Event API is a technical interface which facilitates the flow of event notifications 
    related to all Functional APIs. It specifies a uniform pattern of collecting event objects 
    from a Daemon instance.
    The Event API is symmetric, ie. identical on both Requestor and Provider sides. Note that 
    the Event Type sets received via Event API differ - the difference is indicated in the 
    [Event API specification]
    (https://docs.google.com/document/d/1LWw_4ugMPzRos4FH5LlQmnjHpeLuTvtBiH80ZRLMNDA).
'

servers:
  - url: /event-api/v1

tags:
  - name: common
    description: Requestor/Provider 
  
security:
  - ApiKeyAuth: []

paths:

  /events/{subscriptionId}:
    get:
      tags:
        - common
      summary: Collects events associated with a given Market Subscription.
      description: '
        This is a blocking operation. It will not return until there is at least one new event.

        **Note**: The `collectSubscriptionEvents` call is still possible after the subscription has been destroyed 
        (ie. even for a removed subscription, the related events may still arrive from the network).

        **Note**: The Event Type filtering criteria can be used to specify event types to be included or excluded 
        from scope. Asterisk (*) can be used as a wildcard. Eg.

        1) include all Event Types

        `includeEventTypes: ["*"]`

        2) include only specific Event Types

        `includeEventTypes: ["DemandProposalEvent", "PropertyQueryEvent"]`

        3) include all apart from some specific Event Types

        `includeEventTypes: ["*"]
        excludeEventTypes: ["DemandProposalEvent", "PropertyQueryEvent"]`

        4) include all Event Types with Agreement in name

        `includeEventTypes: ["*Agreement*"]`

        '
      operationId: collectSubscriptionEvents

      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/includeEventTypes'
        - $ref: '#/components/parameters/excludeEventTypes'
        - $ref: 'common.yaml#/parameters/timeout'
        - $ref: '#/components/parameters/afterTimestamp'
        - $ref: '#/components/parameters/maxEvents'
  
      responses:
        '200':
          description: Event list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'

        '401':
          $ref: 'common.yaml#/responses/Unauthorized'
        '403':
          $ref: 'common.yaml#/responses/Forbidden'
        '404':
          $ref: 'common.yaml#/responses/NotFound'
        '500':
          $ref: 'common.yaml#/responses/ServerError'
        default:
          $ref: 'common.yaml#/responses/UnexpectedError'

    delete:
      tags:
        - common
      summary: Clears the server-side event queue.
      description: '
        This method clears the event buffer on Daemon side, to release resources. 
        It is expected for a client (“agent”) application to clear the queue after 
        the events have been read and processed.

        Note: the Daemon implementations may also implement “self-purging” regimes 
        to cater for non-compliant client applications.
        '
      operationId: purgeSubscriptionEvents
  
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/includeEventTypes'
        - $ref: '#/components/parameters/excludeEventTypes'
        - $ref: '#/components/parameters/beforeTimestamp'
    
      responses:
        '200':
          description: Number of purged events.
          content:
            application/json:
              schema:
                type: integer
                
        '401':
          $ref: 'common.yaml#/responses/Unauthorized'
        '403':
          $ref: 'common.yaml#/responses/Forbidden'
        '404':
          $ref: 'common.yaml#/responses/NotFound'
        '500':
          $ref: 'common.yaml#/responses/ServerError'
        default:
          $ref: 'common.yaml#/responses/UnexpectedError'
      
components:
  securitySchemes:
    ApiKeyAuth:
        type: apiKey
        in: header
        name: X-API-KEY
        
  parameters:
    subscriptionId:
      name: subscriptionId
      in: path
      required: true
      schema:
        type: string

    includeEventTypes:
      name: includeEventTypes
      description: >
          Array of Event Type expressions specifying events to be included by the operation. 
          The expressions may include asterisk (*) wildcard to bulk-include sets of event types.
          Event Types which match any of the Event Type expressions (and match none of excludeEventTypes 
          expressions) shall be taken in scope of the operation.
      in: query
      schema:
        type: array
        items:
          type: string

    excludeEventTypes:
      name: excludeEventTypes
      description: >
          Array of Event Types expressions specifying events to be excluded by the operation. 
          The expressions may include asterisk (*) wildcard to bulk-exclude sets of event types.
          Event Types which match any of the "exclude" Event Type expressions shall not be taken 
          in scope of the operation.
      in: query
      schema:
        type: array
        items:
          type: string

    maxEvents:
      name: maxEvents
      description: >
          Maximum number of events that server should return at once
          (empty value means no limit).
      required: false
      in: query
      schema:
        type: integer
        format: int32
        minimum: 0

    afterTimestamp:
      name: afterTimestamp
      description: Apply only to events later than specified timestamp
      in: query
      required: false
      schema:
        type: string
        format: date-time

    beforeTimestamp:
      name: beforeTimestamp
      description: Apply only to events earlier than specified timestamp
      in: query
      required: false
      schema:
        type: string
        format: date-time

  schemas:
    EventType:
        type: string
        enum:
          - DemandProposalEvent
          - OfferProposalEvent
          - PropertyQueryEvent
          - AgreementProposalEvent
          - AgreementAcceptedEvent
          - AgreementRejectedEvent
          - AgreementCancelledEvent
          - AgreementTimeoutEvent
          - AgreementTerminatedEvent
          - CreateActivityEvent
          - DestroyActivityEvent
          - ExeScriptCommandFinishedEvent
          - ActivityStateChangedEvent
          - GetActivityStateEvent
          - GetActivityUsageEvent
          - DebitNoteReceivedEvent
          - DebitNoteAcceptedEvent
          - DebitNoteRejectedEvent
          - DebitNoteFailedEvent
          - DebitNoteSettledEvent
          - DebitNoteCancelledEvent
          - InvoiceReceivedEvent
          - InvoiceAcceptedEvent
          - InvoiceRejectedEvent
          - InvoiceFailedEvent
          - InvoiceSettledEvent
          - InvoiceCancelledEvent
          - PaymentReceivedEvent

    Event:
        type: object
        required:
          - eventType
          - eventDate
        discriminator:
          propertyName: eventType
        properties:
          eventType:
            type: string
          eventDate:
            type: string
            format: date-time
  
    # Market API
  
    DemandProposalEvent:
        allOf:
          - $ref: '#/components/schemas/Event'
          - type: object
        properties:
          proposal:
            $ref: 'market-api.yaml#/components/schemas/Proposal'

    OfferProposalEvent:
        allOf:
          - $ref: '#/components/schemas/Event'
          - type: object
        properties:
          proposal:
            $ref: 'market-api.yaml#/components/schemas/Proposal'

    PropertyQueryEvent:
        allOf:
          - $ref: '#/components/schemas/Event'
          - type: object
        properties:
          propertyQuery:
            $ref: 'market-api.yaml#/components/schemas/PropertyQuery'

    AgreementProposalEvent: 
        allOf:
          - $ref: '#/components/schemas/Event'
          - type: object
        properties:
          agreement:
            $ref: 'market-api.yaml#/components/schemas/Agreement'
      
    # Note that this could best be implemented via two-level inheritance (Event<-AgreementEvent<-...)
    # ...but the OpenAPI Generator seems to be confused by such a setup.
    AgreementAcceptedEvent: 
        allOf:
          - $ref: '#/components/schemas/Event'
          - type: object
        properties:
          agreementId:
            type: string
                              
    AgreementRejectedEvent: 
        allOf:
          - $ref: '#/components/schemas/Event'
          - type: object
        properties:
          agreementId:
            type: string

    AgreementCancelledEvent: 
        allOf:
          - $ref: '#/components/schemas/Event'
          - type: object
        properties:
          agreementId:
            type: string

    AgreementTimeoutEvent: 
        allOf:
          - $ref: '#/components/schemas/Event'
          - type: object
        properties:
          agreementId:
            type: string

    AgreementTerminatedEvent: 
        allOf:
          - $ref: '#/components/schemas/Event'
          - type: object
        properties:
          agreementId:
            type: string

    # Activity API
      
    CreateActivityEvent:
      required:
        - agreementId
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        activityId:
          type: string
        agreementId:
          type: string

    DestroyActivityEvent:
      required:
        - agreementId
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        activityId:
          type: string
        agreementId:
          type: string

    ExeScriptCommandFinishedEvent:
      required:
        - index
        - result
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        activityId:
          type: string
        batchId:
          type: string
        index:
          type: integer
          format: int32
          minimum: 0
        result:
          type: string
          enum:
            - Ok
            - Error
        message:
          type: string
        isBatchFinished:
          type: boolean
    
    ActivityStateChangedEvent:
      required:
        - agreementId
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        activityId:
          type: string
        state:
          $ref: 'activity-api.yaml#/components/schemas/ActivityState'
      
    GetActivityStateEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        activityId:
          type: string

    GetActivityUsageEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        activityId:
          type: string

    # Payment API

    DebitNoteReceivedEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        debitNoteId:
          type: string

    DebitNoteAcceptedEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        debitNoteId:
          type: string

    DebitNoteRejectedEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        debitNoteId:
          type: string
        rejection:
          $ref: 'payment-api.yaml#/components/schemas/Rejection'

    DebitNoteFailedEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        debitNoteId:
          type: string

    DebitNoteSettledEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        debitNoteId:
          type: string

    DebitNoteCancelledEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        debitNoteId:
          type: string

    InvoiceReceivedEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        invoiceId:
          type: string

    InvoiceAcceptedEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        invoiceId:
          type: string

    InvoiceRejectedEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        invoiceId:
          type: string
        rejection:
          $ref: 'payment-api.yaml#/components/schemas/Rejection'

    InvoiceFailedEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        invoiceId:
          type: string

    InvoiceSettledEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        invoiceId:
          type: string

    InvoiceCancelledEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        invoiceId:
          type: string

    PaymentReceivedEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        paymentId:
          type: string

