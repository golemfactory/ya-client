openapi: 3.0.1
info:
  title: Yagna Activity API
  version: 1.2.0
  description: '
      The Activity API can be perceived as controls which a Requestor-side application
      has to steer the execution of an Activity as specified in an Agreement which
      has been negotiated via the Market API/Protocol. This defines possible interactions
      between the Requestor application (via Activity API) and the generic components
      running on the Provider node, which host the Provider-side application code.

      The possible interactions imply a logical “execution environment” component, which
      is the host/container for the “payload” code. The “execution environment” is specified
      as an ExeUnit, with a generic interface via which a Provider node’s Activity Controller
      can operate the hosted code.

      It conforms with capability level 1 of the [Activity API specification]
      (https://docs.google.com/document/d/1BXaN32ediXdBHljEApmznSfbuudTU8TmvOmHKl0gmQM).
  '

servers:
  - url: /activity-api/v1

security:
  - app_key: []

tags:
  - name: requestor_control
    description: Requestor Part (Control)
  - name: requestor_state
    description: Requestor Part (State)
  - name: provider
    description: Provider Part

paths:

  /activity:

    post:
      tags:
        - requestor_control
      summary: Creates new Activity based on given Agreement.
      description: '**Note:** This call shall get routed as a provider event (see
        ProviderEvent structure).'
      operationId: CreateActivity
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: de6673f5-3f16-40ef-a8a3-b7c922092447
        required: true
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: string
                example: '"activityId"'
        400:
          $ref: 'common.yaml#/responses/BadRequest'
        403:
          $ref: 'common.yaml#/responses/Forbidden'
        404:
          $ref: 'common.yaml#/responses/NotFound'
        500:
          $ref: 'common.yaml#/responses/ServerError'

      x-codegen-request-body-name: agreementId

  /activity/{activityId}/exec:

    post:
      tags:
        - requestor_control
      summary: Executes an ExeScript batch within a given Activity.
      description: '**Note:** This call shall get routed directly to ExeUnit.'
      operationId: Exec
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExeScriptRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: string
                example: '"batchId"'
        400:
          $ref: 'common.yaml#/responses/BadRequest'
        403:
          $ref: 'common.yaml#/responses/Forbidden'
        404:
          $ref: 'common.yaml#/responses/NotFound'
        500:
          $ref: 'common.yaml#/responses/ServerError'
      x-codegen-request-body-name: script

  /activity/{activityId}/exec/{batchId}:
    get:
      tags:
        - requestor_control
      summary: Queries for ExeScript batch results.
      description: 'This call shall collect ExeScriptCommand result objects
        received directly from ExeUnit (via the long polling pattern).
        The events are persistent, ie. the API can be called repeatedly
        to receive the same events (the calls don’t remove the event records
        from the receiving queue).
        **Note:** two formats of response are specified (as indicated by the Accept header):
          - application/json - standard JSON response
          - text/event-stream - an EventSource implementation (as per https://www.w3.org/TR/eventsource/)'
      operationId: GetExecBatchResults
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
        - name: batchId
          in: path
          required: true
          schema:
            type: string
        - name: commandIndex
          description: >
            Wait until command with the specified index finishes. Must be accompanied by a valid "pollTimeout" query parameter.
          required: false
          in: query
          schema:
            type: number
            format: integer
            minimum: 0
        - $ref: 'common.yaml#/parameters/afterTimestamp'
        - $ref: 'common.yaml#/parameters/pollTimeout'
      responses:
        200:
          description: Success
          content:
            application/json: # standard JSON response
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExeScriptCommandResult'
            text/event-stream: # an EventSource implementation (as per https://www.w3.org/TR/eventsource/)
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExeScriptCommandResult'
        400:
          $ref: 'common.yaml#/responses/BadRequest'
        403:
          $ref: 'common.yaml#/responses/Forbidden'
        404:
          $ref: 'common.yaml#/responses/NotFound'
        500:
          $ref: 'common.yaml#/responses/ServerError'

  /activity/{activityId}:

    delete:
      tags:
        - requestor_control
      summary: Destroys given Activity.
      description: '**Note:** This call shall get routed as a provider event (see
        ProviderEvent structure).'
      operationId: DestroyActivity
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content: {}
        403:
          $ref: 'common.yaml#/responses/Forbidden'
        404:
          $ref: 'common.yaml#/responses/NotFound'
        500:
          $ref: 'common.yaml#/responses/ServerError'

  /events:
    get:
      tags:
        - provider
      summary: Fetch Requestor command events.
      operationId: CollectActivityEvents
      parameters:
        - $ref: 'common.yaml#/parameters/appSessionId'
        - $ref: 'common.yaml#/parameters/afterTimestamp'
        - $ref: 'common.yaml#/parameters/pollTimeout'
        - $ref: 'common.yaml#/parameters/maxEvents'

      responses:
        200:
          $ref: '#/components/responses/ProviderEventList'
        403:
          $ref: 'common.yaml#/responses/Forbidden'
        500:
          $ref: 'common.yaml#/responses/ServerError'

  /activity/{activityId}/state:

    get:
      tags:
        - provider
        - requestor_state
      summary: Get state of specified Activity.
      operationId: GetActivityState
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityState'
        404:
          $ref: 'common.yaml#/responses/NotFound'
        500:
          $ref: 'common.yaml#/responses/ServerError'

    put:
      tags:
        - provider
      summary: Set state of specified Activity.
      operationId: SetActivityState
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityState'
        required: true
      responses:
        200:
          description: Success
          content: {}
        404:
          $ref: 'common.yaml#/responses/NotFound'
        500:
          $ref: 'common.yaml#/responses/ServerError'

  /activity/{activityId}/usage:

    get:
      tags:
        - provider
        - requestor_state
      summary: Get usage of specified Activity.
      operationId: GetActivityUsage
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                description: Returns the current vector of usage counters consumed
                  by the Activity. The sequence of values corresponds to Usage Vector
                  property (golem.usage.vector) as indicated in the Agreement (Offer
                  part).
                example: '[123.5, 34000]'
                items:
                  type: number
                  format: double
        404:
          $ref: 'common.yaml#/responses/NotFound'
        500:
          $ref: 'common.yaml#/responses/ServerError'

  /activity/{activityId}/command:

    get:
      tags:
        - requestor_state
      summary: Get running commands for a specified Activity.
      description: '**Note:** This call shall get routed directly to ExeUnit.'
      operationId: GetRunningCommand
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/ExeScriptCommandStateList'
        404:
          $ref: 'common.yaml#/responses/NotFound'
        500:
          $ref: 'common.yaml#/responses/ServerError'


components:
  securitySchemes:
    app_key:
      $ref: 'common.yaml#/components/securitySchemes/app_key'

  responses:
    ExeScriptCommandStateList:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ExeScriptCommandState'

    ProviderEventList:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ProviderEvent'

  schemas:
    ExeScriptRequest:
      required:
        - text
      type: object
      properties:
        text:
          type: string

    ExeScriptCommandState:
      required:
        - batchId
        - command
      type: object
      properties:
        batchId:
          type: string
        command:
          type: string
        progress:
          type: string
        params:
          type: array
          items:
            type: string

    ExeScriptCommandResult:
      required:
        - index
        - eventDate
        - result
      type: object
      properties:
        index:
          type: integer
          format: int32
          minimum: 0
        eventDate:
          type: string
          format: date-time
        result:
          type: string
          enum:
            - Ok
            - Error
        message:
          type: string
        isBatchFinished:
          type: boolean

    ActivityUsage:
      type: object
      properties:
        currentUsage:
          type: array
          description: Current usage vector
          items:
            type: number
            format: double
        timestamp:
          type: integer
          description: Usage update timestamp (UTC)

    ActivityState:
      required:
        - state
      type: object
      properties:
        state:
          type: array
          description: State pair tuple (CurrentState, NextState). NextState is equal to null
            if there is no pending transition between states.
          items:
            type: string
            nullable: true
            enum:
              - New
              - Initialized
              - Deployed
              - Ready
              - Unresponsive
              - Terminated
        reason:
          type: string
          description: Reason for Activity termination (specified when Activity in
            Terminated state).
        errorMessage:
          type: string
          description: If error caused state change - error message shall be provided.

    ProviderEvent:
      required:
        - eventType
        - eventDate
        - activityId
      type: object
      properties:
        eventType:
          type: string
        eventDate:
          type: string
          format: date-time
        activityId:
          type: string
      discriminator:
        propertyName: eventType

    CreateActivity:
      required:
        - agreementId
      allOf:
        - $ref: '#/components/schemas/ProviderEvent'
        - type: object
          properties:
            agreementId:
              type: string

    DestroyActivity:
      required:
        - agreementId
      allOf:
        - $ref: '#/components/schemas/ProviderEvent'
        - type: object
          properties:
            agreementId:
              type: string

    GetActivityState:
      allOf:
        - $ref: '#/components/schemas/ProviderEvent'

    GetActivityUsage:
      allOf:
        - $ref: '#/components/schemas/ProviderEvent'
