openapi: 3.0.1
info:
  title: Yagna Activity API
  version: 1.2.0
  description: '
      The Activity API can be perceived as controls which a Requestor-side application
      has to steer the execution of an Activity as specified in an Agreement which 
      has been negotiated via the Market API/Protocol. This defines possible interactions 
      between the Requestor application (via Activity API) and the generic components 
      running on the Provider node, which host the Provider-side application code. 

      The possible interactions imply a logical “execution environment” component, which 
      is the host/container for the “payload” code. The “execution environment” is specified 
      as an ExeUnit, with a generic interface via which a Provider node’s Activity Controller 
      can operate the hosted code. 

      It conforms with capability level 1 of the [Activity API specification]
      (https://docs.google.com/document/d/1BXaN32ediXdBHljEApmznSfbuudTU8TmvOmHKl0gmQM).
  '

servers:
  - url: /activity-api/v1

tags:
  - name: requestor_control
    description: Requestor Part (Control)
  - name: requestor_state
    description: Requestor Part (State)
  - name: provider
    description: Provider Part
    
paths:

  /activity:

    post:
      tags:
        - requestor_control
      summary: Creates new Activity based on given Agreement.
      description: '**Note:** This call shall get routed as a provider event (see
        Event API).'
      operationId: CreateActivity
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: string
                example: '"activityId"'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
      x-codegen-request-body-name: agreementId

  /activity/{activityId}/exec:

    post:
      tags:
        - requestor_control
      summary: Executes an ExeScript batch within a given Activity.
      description: '**Note:** This call shall get routed directly to ExeUnit.'
      operationId: Exec
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExeScriptRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: string
                example: '"batchId"'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
      x-codegen-request-body-name: script

  /activity/{activityId}:

    delete:
      tags:
        - requestor_control
      summary: Destroys given Activity.
      description: '**Note:** This call shall get routed as a provider event (see
        Event API).'
      operationId: DestroyActivity
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content: {}
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'

  /activity/{activityId}/state:

    get:
      tags:
        - provider
        - requestor_state
      summary: Get state of specified Activity.
      operationId: GetActivityState
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityState'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'

    put:
      tags:
        - provider
      summary: Set state of specified Activity.
      operationId: SetActivityState
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityState'
        required: true
      responses:
        200:
          description: Success
          content: {}
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'

  /activity/{activityId}/usage:

    get:
      tags:
        - provider
        - requestor_state
      summary: Get usage of specified Activity.
      operationId: GetActivityUsage
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                description: Returns the current vector of usage counters consumed
                  by the Activity. The sequence of values corresponds to Usage Vector
                  property (golem.usage.vector) as indicated in the Agreement (Offer
                  part).
                example: '[123.5, 34000]'
                items:
                  type: number
                  format: double
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'

  /activity/{activityId}/command:

    get:
      tags:
        - requestor_state
      summary: Get running command for a specified Activity.
      description: '**Note:** This call shall get routed directly to ExeUnit.'
      operationId: GetRunningCommand
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExeScriptCommandState'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'


components:
  schemas:
    ExeScriptRequest:
      required:
        - text
      type: object
      properties:
        text:
          type: string

    ExeScriptCommandState:
      required:
        - command
      type: object
      properties:
        command:
          type: string
        progress:
          type: string
        params:
          type: array
          items:
            type: string

    ActivityUsage:
      type: object
      properties:
        currentUsage:
          type: array
          description: Current usage vector
          items:
            type: number
            format: double
        timestamp:
          type: integer
          description: Usage update timestamp (UTC)

    ActivityState:
      required:
        - state
      type: object
      properties:
        state:
          type: string
          enum:
            - New
            - Initialized
            - Deploying
            - Ready
            - Starting
            - Active
            - Unresponsive
            - Terminated
        reason:
          type: string
          description: Reason for Activity termination (specified when Activity in
            Terminated state).
        errorMessage:
          type: string
          description: If error caused state change - error message shall be provided.

