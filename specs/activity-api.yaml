openapi: 3.0.1
info:
  title: Yagna Activity API
  description: It conforms with capability level 1 of the [Activity API specification](https://docs.google.com/document/d/1BXaN32ediXdBHljEApmznSfbuudTU8TmvOmHKl0gmQM).
  version: v1

servers:
  - url: /activity-api/v1

security:
  - app_key: []

tags:
  - name: requestor_control
    description: Requestor Part (Control)
  - name: requestor_state
    description: Requestor Part (State)
  - name: provider
    description: Provider Part

paths:
  /activity:
    get:
      tags:
        - provider
      summary: Lists all Activity ids for Provider identified by app_key.
      operationId: ListActivities
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
    post:
      tags:
        - requestor_control
      summary: Creates new Activity based on given Agreement.
      description: '**Note:** This call shall get routed as a provider event (see
        ProviderEvent structure).'
      operationId: CreateActivity
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: string
                - $ref: '#/components/schemas/CreateActivityRequest'
        required: true
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - type: string
                  - $ref: '#/components/schemas/CreateActivityResult'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
      x-codegen-request-body-name: agreementId
  /activity/{activityId}/exec:
    post:
      tags:
        - requestor_control
      summary: Executes an ExeScript batch within a given Activity.
      description: '**Note:** This call shall get routed directly to ExeUnit.'
      operationId: Exec
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExeScriptRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: string
                example: '"batchId"'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
      x-codegen-request-body-name: script
  /activity/{activityId}/encrypted:
    post:
      tags:
        - requestor_control
      summary: Sends encrypted command to secure exe-unit.
      operationId: callEncrypted
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'

  /activity/{activityId}/exec/{batchId}:
    get:
      tags:
        - requestor_control
      summary: Queries for ExeScript batch results.
      description: '**Note:** This call shall collect ExeScriptCommand result objects
        received directly from ExeUnit.'
      operationId: GetExecBatchResults
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
        - name: batchId
          in: path
          required: true
          schema:
            type: string
        - name: commandIndex
          description: >
            Wait until command with the specified index finishes. Must be accompanied by a valid "timeout" query parameter.
          required: false
          in: query
          schema:
            type: number
            format: integer
            minimum: 0
        - $ref: 'common.yaml#/parameters/timeout'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExeScriptCommandResult'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
  /activity/{activityId}:
    delete:
      tags:
        - requestor_control
      summary: Destroys given Activity.
      description: '**Note:** This call shall get routed as a provider event (see
        ProviderEvent structure).'
      operationId: DestroyActivity
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content: {}
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
  /events:
    get:
      tags:
        - provider
      summary: Fetch Requestor command events.
      operationId: CollectActivityEvents
      parameters:
        - $ref: 'common.yaml#/parameters/timeout'
        - $ref: 'common.yaml#/parameters/maxEvents'

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/CreateActivity'
                    - $ref: '#/components/schemas/DestroyActivity'
                    - $ref: '#/components/schemas/GetActivityState'
                    - $ref: '#/components/schemas/GetActivityUsage'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
  /activity/{activityId}/state:
    get:
      tags:
        - provider
        - requestor_state
      summary: Get state of specified Activity.
      operationId: GetActivityState
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityState'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
    put:
      tags:
        - provider
      summary: Set state of specified Activity.
      operationId: SetActivityState
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityState'
        required: true
      responses:
        200:
          description: Success
          content: {}
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
  /activity/{activityId}/usage:
    get:
      tags:
        - provider
        - requestor_state
      summary: Get usage of specified Activity.
      operationId: GetActivityUsage
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityUsage'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
  /activity/{activityId}/command:
    get:
      tags:
        - requestor_state
      summary: Get running command for a specified Activity.
      description: '**Note:** This call shall get routed directly to ExeUnit.'
      operationId: GetRunningCommand
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExeScriptCommandState'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/schemas/ErrorMessage'
components:
  securitySchemes:
    app_key:
      $ref: 'common.yaml#/components/securitySchemes/app_key'
  schemas:
    CreateActivityRequest:
      type: object
      required:
        - agreementId
      properties:
        agreementId:
          type: string
        requestorPubKey:
          type: string

    CreateActivityResult:
      type: object
      required:
        - activityId
      properties:
        activityId:
          type: string
        credentials:
          $ref: '#/components/schemas/Credentials'

    Credentials:
      type: object
      required:
        - sgx
      properties:
        sgx:
          $ref: '#/components/schemas/SgxCredentials'

    SgxCredentials:
      type: object
      required:
        - enclavePubKey
        - requestorPubKey
        - payloadHash
        - iasReport
        - iasSig
      properties:
        enclavePubKey:
          type: string
          format: hex
        requestorPubKey:
          type: string
          format: hex
        payloadHash:
          type: string
        iasReport:
          type: string
        iasSig:
          type: string
          format: hex

    ExeScriptRequest:
      required:
        - text
      type: object
      properties:
        text:
          type: string

    ExeScriptCommandResult:
      required:
        - index
        - result
      type: object
      properties:
        index:
          type: integer
          format: int32
          minimum: 0
        result:
          type: string
          enum:
            - Ok
            - Error
        stdout:
          type: string
        stderr:
          type: string
        message:
          type: string
        isBatchFinished:
          type: boolean

    ExeScriptCommandState:
      required:
        - command
      type: object
      properties:
        command:
          type: string
        progress:
          type: string
        params:
          type: array
          items:
            type: string

    ActivityUsage:
      type: object
      properties:
        currentUsage:
          type: array
          description: Current vector of usage counters consumed
            by the Activity. The sequence of values corresponds to Usage Vector
            property (golem.usage.vector) as indicated in the Agreement (Offer
            part).
          example: '[123.5, 34000]'
          items:
            type: number
            format: double
        timestamp:
          type: integer
          description: Usage update timestamp (UTC)

    ActivityState:
      required:
        - state
      type: object
      properties:
        state:
          type: array
          description: State pair tuple (CurrentState, NextState). NextState is equal to null
            if there is no pending transition between states.
          items:
            type: string
            nullable: true
            enum:
              - New
              - Initialized
              - Deployed
              - Ready
              - Unresponsive
              - Terminated
        reason:
          type: string
          description: Reason for Activity termination (specified when Activity in
            Terminated state).
        errorMessage:
          type: string
          description: If error caused state change - error message shall be provided.

    ProviderEvent:
      required:
        - eventType
        - activityId
      type: object
      properties:
        eventType:
          type: string
        activityId:
          type: string
      discriminator:
        propertyName: eventType

    CreateActivity:
      required:
        - agreementId
      allOf:
        - $ref: '#/components/schemas/ProviderEvent'
        - type: object
          properties:
            agreementId:
              type: string
            requestorPubKey:
              type: string
              format: byte

    DestroyActivity:
      required:
        - agreementId
      allOf:
        - $ref: '#/components/schemas/ProviderEvent'
        - type: object
          properties:
            agreementId:
              type: string

    GetActivityState:
      allOf:
        - $ref: '#/components/schemas/ProviderEvent'

    GetActivityUsage:
      allOf:
        - $ref: '#/components/schemas/ProviderEvent'
